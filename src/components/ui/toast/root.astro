---
import { cva, type VariantProps } from "class-variance-authority";

type Props = {
  /**
   * Position of the toast container
   * @default "bottom-right"
   */
  position?:
    | "top-left"
    | "top-center"
    | "top-right"
    | "bottom-left"
    | "bottom-center"
    | "bottom-right";
};

export type ToastVariants = VariantProps<typeof variants>;

const variants = cva("fixed z-50 flex flex-col gap-2 p-4 pointer-events-none", {
  variants: {
    position: {
      "top-left": "top-0 left-0",
      "top-center": "top-0 left-1/2 -translate-x-1/2",
      "top-right": "top-0 right-0",
      "bottom-left": "bottom-0 left-0",
      "bottom-center": "bottom-0 left-1/2 -translate-x-1/2",
      "bottom-right": "bottom-0 right-0",
    },
  },
  defaultVariants: {
    position: "bottom-right",
  },
});

const { position = "bottom-right" } = Astro.props;
---

<div
  id="toast-container"
  class={variants({ position })}
  data-position={position}
  role="region"
  aria-live="polite"
  aria-label="Notifications"
>
  <!-- Toasts will be injected here -->
</div>

<script>
  type ToastType = "default" | "success" | "error" | "warning" | "info";
  type ToastPosition =
    | "top-left"
    | "top-center"
    | "top-right"
    | "bottom-left"
    | "bottom-center"
    | "bottom-right";

  interface ToastOptions {
    title?: string;
    description?: string;
    type?: ToastType;
    duration?: number;
    action?: {
      label: string;
      onClick: () => void;
    };
  }

  class ToastManager {
    private container: HTMLElement;
    private position: ToastPosition;
    private toasts: Map<string, { element: HTMLElement; timer: number }> = new Map();

    constructor() {
      this.container = document.getElementById("toast-container")!;
      this.position =
        (this.container.getAttribute("data-position") as ToastPosition) || "bottom-right";
      this.setupStyles();
    }

    private setupStyles() {
      // Inject keyframes for animations if not already present
      if (!document.getElementById("toast-styles")) {
        const style = document.createElement("style");
        style.id = "toast-styles";
        style.textContent = `
          @keyframes toast-slide-in-right {
            from {
              transform: translateX(calc(100% + 1rem));
              opacity: 0;
            }
            to {
              transform: translateX(0);
              opacity: 1;
            }
          }
          
          @keyframes toast-slide-out-right {
            from {
              transform: translateX(0);
              opacity: 1;
            }
            to {
              transform: translateX(calc(100% + 1rem));
              opacity: 0;
            }
          }
          
          @keyframes toast-slide-in-left {
            from {
              transform: translateX(calc(-100% - 1rem));
              opacity: 0;
            }
            to {
              transform: translateX(0);
              opacity: 1;
            }
          }
          
          @keyframes toast-slide-out-left {
            from {
              transform: translateX(0);
              opacity: 1;
            }
            to {
              transform: translateX(calc(-100% - 1rem));
              opacity: 0;
            }
          }
          
          @keyframes toast-slide-in-top {
            from {
              transform: translateY(-100%);
              opacity: 0;
            }
            to {
              transform: translateY(0);
              opacity: 1;
            }
          }
          
          @keyframes toast-slide-out-top {
            from {
              transform: translateY(0);
              opacity: 1;
            }
            to {
              transform: translateY(-100%);
              opacity: 0;
            }
          }
          
          @keyframes toast-slide-in-bottom {
            from {
              transform: translateY(100%);
              opacity: 0;
            }
            to {
              transform: translateY(0);
              opacity: 1;
            }
          }
          
          @keyframes toast-slide-out-bottom {
            from {
              transform: translateY(0);
              opacity: 1;
            }
            to {
              transform: translateY(100%);
              opacity: 0;
            }
          }
          
          .toast-enter-right {
            animation: toast-slide-in-right 0.2s ease-out forwards;
          }
          
          .toast-exit-right {
            animation: toast-slide-out-right 0.2s ease-in forwards;
          }
          
          .toast-enter-left {
            animation: toast-slide-in-left 0.2s ease-out forwards;
          }
          
          .toast-exit-left {
            animation: toast-slide-out-left 0.2s ease-in forwards;
          }
          
          .toast-enter-top {
            animation: toast-slide-in-top 0.2s ease-out forwards;
          }
          
          .toast-exit-top {
            animation: toast-slide-out-top 0.2s ease-in forwards;
          }
          
          .toast-enter-bottom {
            animation: toast-slide-in-bottom 0.2s ease-out forwards;
          }
          
          .toast-exit-bottom {
            animation: toast-slide-out-bottom 0.2s ease-in forwards;
          }
        `;
        document.head.appendChild(style);
      }
    }

    private getAnimationDirection(): string {
      if (this.position.includes("left")) return "left";
      if (this.position.includes("right")) return "right";
      if (this.position.includes("top")) return "top";
      return "bottom";
    }

    private getToastStyles(type: ToastType): string {
      const baseStyles =
        "pointer-events-auto w-full max-w-sm rounded-lg border p-4 shadow-lg backdrop-blur-sm";

      const typeStyles = {
        default: "bg-background border-border text-foreground",
        success:
          "bg-green-50 dark:bg-green-950 border-green-200 dark:border-green-800 text-green-900 dark:text-green-100",
        error:
          "bg-red-50 dark:bg-red-950 border-red-200 dark:border-red-800 text-red-900 dark:text-red-100",
        warning:
          "bg-yellow-50 dark:bg-yellow-950 border-yellow-200 dark:border-yellow-800 text-yellow-900 dark:text-yellow-100",
        info: "bg-blue-50 dark:bg-blue-950 border-blue-200 dark:border-blue-800 text-blue-900 dark:text-blue-100",
      };

      return `${baseStyles} ${typeStyles[type]}`;
    }

    private getIcon(type: ToastType): string {
      const icons = {
        default: "",
        success: `<svg class="w-5 h-5 text-green-600 dark:text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
        </svg>`,
        error: `<svg class="w-5 h-5 text-red-600 dark:text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>`,
        warning: `<svg class="w-5 h-5 text-yellow-600 dark:text-yellow-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
        </svg>`,
        info: `<svg class="w-5 h-5 text-blue-600 dark:text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>`,
      };

      return icons[type];
    }

    private createToastElement(id: string, message: string, options: ToastOptions): HTMLElement {
      const { title, description, type = "default", action } = options;
      const toast = document.createElement("div");
      const icon = this.getIcon(type);
      const direction = this.getAnimationDirection();

      toast.id = id;
      toast.className = `${this.getToastStyles(type)} toast-enter-${direction}`;
      toast.setAttribute("role", "status");
      toast.setAttribute("aria-live", "polite");

      const content = title
        ? `<div class="flex gap-3">
            ${icon ? `<div class="flex-shrink-0 mt-0.5">${icon}</div>` : ""}
            <div class="flex-1 space-y-1">
              <div class="font-semibold text-sm">${title}</div>
              ${description ? `<div class="text-sm opacity-90">${description}</div>` : ""}
            </div>
            <button 
              data-toast-close="${id}"
              class="flex-shrink-0 opacity-70 hover:opacity-100 transition-opacity"
              aria-label="Close notification"
            >
              <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>`
        : `<div class="flex items-center gap-3">
            ${icon ? `<div class="flex-shrink-0">${icon}</div>` : ""}
            <div class="flex-1 text-sm">${message}</div>
            <button 
              data-toast-close="${id}"
              class="flex-shrink-0 opacity-70 hover:opacity-100 transition-opacity"
              aria-label="Close notification"
            >
              <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>`;

      toast.innerHTML = content;

      if (action) {
        const actionBtn = document.createElement("button");
        actionBtn.className =
          "mt-2 w-full text-sm font-medium py-1.5 px-3 rounded hover:bg-black/5 dark:hover:bg-white/10 transition-colors";
        actionBtn.textContent = action.label;
        actionBtn.onclick = () => {
          action.onClick();
          this.dismiss(id);
        };
        toast.appendChild(actionBtn);
      }

      // Close button handler
      const closeBtn = toast.querySelector(`[data-toast-close="${id}"]`) as HTMLElement;
      if (closeBtn) {
        closeBtn.onclick = () => this.dismiss(id);
      }

      return toast;
    }

    show(message: string, options: ToastOptions = {}): string {
      const id = `toast-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
      const duration = options.duration ?? 4000;

      const toastElement = this.createToastElement(id, message, options);

      // For top positions, prepend; for bottom positions, append
      if (this.position.includes("top")) {
        this.container.prepend(toastElement);
      } else {
        this.container.appendChild(toastElement);
      }

      // Auto dismiss after duration
      const timer = window.setTimeout(() => {
        this.dismiss(id);
      }, duration);

      this.toasts.set(id, { element: toastElement, timer });

      return id;
    }

    dismiss(id: string): void {
      const toast = this.toasts.get(id);
      if (!toast) return;

      const direction = this.getAnimationDirection();

      window.clearTimeout(toast.timer);
      toast.element.classList.remove(`toast-enter-${direction}`);
      toast.element.classList.add(`toast-exit-${direction}`);

      setTimeout(() => {
        toast.element.remove();
        this.toasts.delete(id);
      }, 200);
    }

    dismissAll(): void {
      this.toasts.forEach((_, id) => this.dismiss(id));
    }
  }

  // Create global toast instance
  const toastManager = new ToastManager();

  // Expose global toast API
  declare global {
    interface Window {
      toast: {
        (message: string, options?: ToastOptions): string;
        success: (message: string, options?: Omit<ToastOptions, "type">) => string;
        error: (message: string, options?: Omit<ToastOptions, "type">) => string;
        warning: (message: string, options?: Omit<ToastOptions, "type">) => string;
        info: (message: string, options?: Omit<ToastOptions, "type">) => string;
        dismiss: (id: string) => void;
        dismissAll: () => void;
      };
    }
  }

  window.toast = Object.assign(
    (message: string, options?: ToastOptions) => toastManager.show(message, options),
    {
      success: (message: string, options?: Omit<ToastOptions, "type">) =>
        toastManager.show(message, { ...options, type: "success" }),
      error: (message: string, options?: Omit<ToastOptions, "type">) =>
        toastManager.show(message, { ...options, type: "error" }),
      warning: (message: string, options?: Omit<ToastOptions, "type">) =>
        toastManager.show(message, { ...options, type: "warning" }),
      info: (message: string, options?: Omit<ToastOptions, "type">) =>
        toastManager.show(message, { ...options, type: "info" }),
      dismiss: (id: string) => toastManager.dismiss(id),
      dismissAll: () => toastManager.dismissAll(),
    }
  );

  // Re-initialize after page transitions
  document.addEventListener("astro:after-swap", () => {
    const newContainer = document.getElementById("toast-container");
    if (newContainer) {
      (toastManager as any).container = newContainer;
      (toastManager as any).position = newContainer.getAttribute("data-position") || "bottom-right";
    }
  });
</script>
