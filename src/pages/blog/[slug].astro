---
import type { GetStaticPaths, InferGetStaticPropsType } from "astro";
import { Picture } from "astro:assets";

import Layout from "#/layouts/layout.astro";
import { getSortedPosts, type GetSortedPosts } from "#/content/utils";

import LinkHeader from "#/components/ui/link-header.astro";
import Link from "#/components/ui/link.astro";
import Text from "#/components/ui/text.astro";
import Date from "#/components/ui/date.astro";
import StarSeparator from "#/components/ui/star-separator.astro";
import Chip from "#/components/ui/chip.astro";
import Blockquote from "#/components/ui/blockquote.astro";
import Separator from "#/components/ui/separator.astro";
import * as Code from "#/components/ui/code";

import PostComments from "./_components/post-comments.astro";
import PostViews from "./_components/post-views.astro";
import PostNavigator from "./_components/post-navigator.astro";
import PostActions from "./_components/post-actions.astro";
import PostToc from "./_components/post-toc.astro";

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

export const getStaticPaths = (async () =>
  (await getSortedPosts()).map((post, index, posts) => {
    const prevPost = (posts[index + 1] ?? posts[0]) as GetSortedPosts[0];
    const nextPost = (posts[index - 1] ?? posts[posts.length - 1]) as GetSortedPosts[0];
    return {
      params: { slug: post.id },
      props: { ...post, morePosts: [prevPost, nextPost] },
    };
  })) satisfies GetStaticPaths;

const { id: postId, data, headings, Content, morePosts } = Astro.props;
const { title, pubDate, image, description } = data;
const [prevPost, nextPost] = morePosts;

const publishDate = pubDate.toLocaleString();
---

<Layout
  metadata={{
    title: `Mohammed's blog | ${title}`,
    description: description,
  }}
>
  <article itemscope class="py-6">
    <header class="mb-8 space-y-4">
      <Text as="h1" size="3xl" class="font-8bit text-center font-bold">
        {title}
      </Text>

      <div class="text-muted-foreground flex flex-wrap items-center justify-center gap-2 text-sm">
        <Chip icon="user">Mohammed</Chip>

        <Chip icon="calendar">
          <Date
            value={data.pubDate}
            variant="muted"
            size="xs"
            datetime={publishDate}
            itemprop="datePublished"
          />
        </Chip>

        <Chip icon="clock-4">{data.readingTime}</Chip>

        <Chip icon="eye">
          <PostViews data-post-views={postId} server:defer id={postId} variant="muted" size="xs" />
        </Chip>
      </div>
    </header>

    <PostToc headings={headings} />

    <div class="my-5">
      <Picture
        src={image}
        formats={["avif", "webp"]}
        alt={title}
        width={800}
        height={400}
        class="border-border aspect-[2/1] w-full rounded-lg border object-cover"
      />
    </div>

    <div
      class:list={[
        "w-full space-y-4 font-sans text-lg text-current/80",
        // Heading styles
        "[&_h1]:mt-0 [&_h1]:mb-6 [&_h1]:text-4xl [&_h1]:font-bold",
        "[&_h2]:mt-8 [&_h2]:mb-4 [&_h2]:text-3xl [&_h2]:font-bold",
        "[&_h3]:mt-6 [&_h3]:mb-3 [&_h3]:text-2xl [&_h3]:font-bold",
        "[&_h4]:mt-4 [&_h4]:mb-2 [&_h4]:text-xl [&_h4]:font-bold",
        "[&_h5]:mt-3 [&_h5]:mb-2 [&_h5]:text-lg [&_h5]:font-bold",
        "[&_h6]:mt-2 [&_h6]:mb-2 [&_h6]:text-base [&_h6]:font-bold",
        // List styles
        "[&_:where(ol,ul)]:list-inside [&_:where(ol,ul)]:space-y-2",
        "[&_ol]:list-decimal [&_ul]:list-disc",
        // Fix p tags in list items - make them inline
        "[&_li>p]:m-0 [&_li>p]:inline",
        "[&_li>p+p]:mt-4 [&_li>p+p]:block",
        // Inline code
        "[&_:not(pre)>code]:bg-muted [&_:not(pre)>code]:relative [&_:not(pre)>code]:rounded",
        "[&_:not(pre)>code]:px-1.5 [&_:not(pre)>code]:py-0.5",
        "[&_:not(pre)>code]:font-mono [&_:not(pre)>code]:text-sm [&_:not(pre)>code]:font-normal",
        // Dark mode inline code
        "dark:[&_:not(pre)>code]:bg-muted/50",
      ]}
      itemprop="articleBody"
    >
      <Content
        components={{
          h2: LinkHeader,
          a: Link,
          hr: StarSeparator,
          blockquote: Blockquote,
          figure: Code.Root,
          figcaption: Code.Header,
          pre: Code.Content,
          code: Code.Block,
        }}
      />
    </div>

    <footer class="mt-10 space-y-6">
      <Separator />
      <PostActions />
      <PostNavigator prevPost={prevPost} nextPost={nextPost} />
      <Separator />
      <PostComments />
    </footer>
  </article>
</Layout>
