---
import type { HTMLTag, Polymorphic } from "astro/types";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "#/lib/utils";

type Props<Tag extends HTMLTag = "p"> = Polymorphic<{ as: Tag }> & TextVariants;

export type TextVariants = VariantProps<typeof textVariants>;

export const textVariants = cva("", {
  variants: {
    variant: {
      default: "text-foreground",
      muted: "text-muted-foreground",
      destructive: "text-destructive",
      accent: "text-accent",
      gradient: "gradient-text",
    },
    size: {
      // Standard sizes
      default: "text-sm md:text-base",
      xs: "text-[0.65rem] md:text-xs",
      sm: "text-xs md:text-sm",
      lg: "text-base md:text-lg",
      xl: "text-lg md:text-xl",
      "2xl": "text-xl md:text-2xl",
      "3xl": "text-2xl md:text-3xl",
      // Fluid sizes
      "fluid-xs": "text-fluid-xs",
      "fluid-sm": "text-fluid-sm",
      "fluid-base": "text-fluid-base",
      "fluid-lg": "text-fluid-lg",
      "fluid-xl": "text-fluid-xl",
      "fluid-2xl": "text-fluid-2xl",
      "fluid-3xl": "text-fluid-3xl",
      "fluid-4xl": "text-fluid-4xl",
      "fluid-5xl": "text-fluid-5xl",
    },
  },
  defaultVariants: {
    variant: "default",
    size: "fluid-base",
  },
});

const { as: Tag = "p", class: className, variant, size, ...props } = Astro.props;
---

<Tag {...props} class={cn(textVariants({ variant, size }), className)}>
  <slot />
</Tag>
