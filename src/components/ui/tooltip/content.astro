---
import type { HTMLAttributes } from "astro/types";
import { cva, type VariantProps } from "class-variance-authority";

type Props = HTMLAttributes<"div"> &
  ContentVariants & {
    /**
     * Offset distance in pixels
     * @default 4
     */
    sideOffset?: number;
    /**
     * Prevent the tooltip from colliding with other elements
     * @default true
     */
    avoidCollisions?: boolean;
    /**
     * Open and close animation duration in milliseconds
     * @default 150
     */
    animationDuration?: number;
  };

export type ContentVariants = VariantProps<typeof variants>;

const variants = cva(
  [
    "tooltip-content",
    "absolute z-50 hidden px-3 py-1.5 whitespace-nowrap shadow-sm will-change-transform",
    "bg-popover text-popover-foreground rounded-md border",
    "animate-in fade-in zoom-in-95",
    "data-[state=closed]:animate-out data-[state=closed]:fill-mode-forwards fade-out zoom-out-95",
  ],
  {
    variants: {
      side: {
        left: "slide-in-from-right-2 right-(--tooltip-offset)",
        right: "slide-in-from-left-2 left-(--tooltip-offset)",
        bottom: "slide-in-from-top-2 top-(--tooltip-offset)",
        top: "slide-in-from-bottom-2 bottom-(--tooltip-offset)",
      },
      align: {
        center: "",
        start: "",
        end: "",
      },
    },
    compoundVariants: [
      { side: ["top", "bottom"], align: "center", class: "left-[50%] translate-x-[-50%]" },
      { side: ["left", "right"], align: "center", class: "top-[50%] translate-y-[-50%]" },
      { side: ["top", "bottom"], align: "start", class: "left-0" },
      { side: ["top", "bottom"], align: "end", class: "right-0" },
      { side: ["left", "right"], align: "start", class: "top-0" },
      { side: ["left", "right"], align: "end", class: "bottom-0" },
    ],
    defaultVariants: {
      side: "top",
      align: "center",
    },
  }
);

const {
  side = "top",
  align = "center",
  sideOffset = 4,
  avoidCollisions = true,
  animationDuration = 150,
  class: className,
  ...props
} = Astro.props;
---

<div
  {...props}
  class={variants({ side, align, className })}
  data-slot="tooltip-content"
  data-state="closed"
  data-side={side}
  data-align={align}
  {...avoidCollisions && { "data-avoid-collisions": "" }}
  role="tooltip"
  style={{
    "--tooltip-offset": `calc(100% + ${sideOffset}px)`,
    animationDuration: `${animationDuration}ms`,
  }}
>
  <slot />
</div>
