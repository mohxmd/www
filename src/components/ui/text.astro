---
import type { HTMLTag, Polymorphic } from "astro/types";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "#/lib/utils";

type Props<Tag extends HTMLTag = "p"> = Polymorphic<{ as: Tag }> & TextVariants;

export type TextVariants = VariantProps<typeof textVariants>;

export const textVariants = cva("", {
  variants: {
    variant: {
      default: "text-foreground",
      muted: "text-muted-foreground",
      destructive: "text-destructive",
    },
    size: {
      default: "text-base",
      xs: "text-xs",
      sm: "text-sm",
      lg: "text-lg",
      xl: "text-xl",
      "2xl": "text-2xl",
      "3xl": "text-3xl",
    },
  },
  defaultVariants: {
    variant: "default",
    size: "default",
  },
});

const {
  as: Tag = "p",
  class: className,
  variant,
  size,
  ...props
} = Astro.props;
---

<Tag {...props} class={cn(textVariants({ variant, size }), className)}>
  <slot />
</Tag>
