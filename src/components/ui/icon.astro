---
import { Icon as Component } from "astro-icon/components";
import { type ComponentProps } from "astro/types";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "#/lib/utils";

type Props = ComponentProps<typeof Component> & IconVariants;

export type IconVariants = VariantProps<typeof iconVariants>;

const iconVariants = cva("shrink-0", {
  variants: {
    size: {
      xs: "size-2",
      sm: "size-4",
      md: "size-5",
      lg: "size-6",
      xl: "size-8",
    },
  },
  defaultVariants: {
    size: "md",
  },
});

function toKebabCase(str: string): string {
  return str
    .replace(/([a-z])([A-Z])/g, "$1-$2")
    .replace(/([A-Z])([A-Z][a-z])/g, "$1-$2")
    .toLowerCase();
}

function processIconName(name: string): string {
  if (name.includes(":")) {
    return name;
  }
  const kebabName = toKebabCase(name);
  return `lucide:${kebabName}`;
}

const { class: className, name, size, ...props } = Astro.props;
const processedName = processIconName(name);
---

<Component
  {...props}
  aria-hidden
  name={processedName}
  class={cn(iconVariants({ size }), "shrink-0", className)}
/>
